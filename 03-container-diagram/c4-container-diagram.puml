@startuml "c4-container-diagram"
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

'LAYOUT_TOP_DOWN()
LAYOUT_LEFT_RIGHT()

System_Ext(wis2shared, "WIS2.0 Shared Services", "Catalogue, Message Broker, Service manager, BUFR to GTS forwarding.")
SystemDb_Ext(oscar, "WMO OSCAR", "WMO WIGOS metadata DB")
System_Ext(obscoll,"Observations Collection", "NMHS Observation Collection system")
System(centralapi, "Central E-SOH API end-point", "Central end-point linking the E-SOH local instances to provide a unified interface.")

System_Boundary(esoh, "E-SOH local instance"){
    ContainerQueue(queue, "Notification Service", "nats/mosquitto/..?", "MQTT Event Queue. WIS2 real-time data sharing by a publication/subscription (PubSub) mechanism based on the Message Queuing Protocol (MQP).")

    Container(queries, "Search and Access APIs", "e.g., pygeoapi", "OGC EDR and Records. Direct local access can be enabled depending on the local data policy.", $tags = "microService")

    Container(ingestion, "Ingestion", "?", "Validate incoming, and forward to data and metadata store. API or object-store?")
    Container(decoder, "Input decoder", "?", "Decode input data (e.g., BUFR, CSV), validate and enrich (e.g., input files that are missing location metadata but contain the WIGOS identification), and write to E-SOH format.")

    'System(records, "Search API", "OGC Records. Direct local access can be enabled depending on the local data policy.", $tags = "microService")

    Container(output_encoder, "Output encoder", "?", "Output files (e.g., BUFR) are created based on API query.")
    Container(lmar, "Logging, monitoring, alerting and reporting", "")


    ContainerDb(store, "Data and Metadata Store", "", "Storage of 24 hours of data and indexing.")

}

Rel_D(obscoll, ingestion, "pushes data to")
Rel_U(ingestion, obscoll, "listens to event queue, and pulls data from")
Rel(ingestion, decoder, "transforms data using", "")
Rel_L(decoder, oscar, "gets metadata from", "https")

Rel_U(wis2shared, queries, "pulls BUFR data from")
Rel_U(wis2shared, queue, "listens to event queue")

Rel_U(queries, output_encoder, "generates output data using")
Rel_U(centralapi, queries, "pulls data from")
Rel_U(centralapi, queue, "listens to event queue")

Rel(ingestion, store, "stores data and metadata in", "?")
Rel(ingestion, queue, "sends notification to", "MQTT")

Rel_U(queries, store, "search and access data")

@enduml
