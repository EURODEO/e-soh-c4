@startuml context-diagram
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml

LAYOUT_TOP_DOWN()
'LAYOUT_LEFT_RIGHT()

Person(consumers, "Data Consumer", "A data consumer can be a human (advanced, intermediate or simple users) or a machine (e.g., a mobile app or a data portal). Simple and intermediate users search, inspect, and access data via an external interface (e.g., a mobile app or data portal). Advanced users acess the search, visualization, and distribution services directly. Open licenses and well documented data following international standards enable Interoperability and Reusability.")
SystemDb_Ext(oscar, "OSCAR", "Web resource with WIGOS metadata for all surface-based observing stations and platforms.")

Enterprise_Boundary(nhms, "National Meteorological and Hydrological Service (NMHS)"){
  Person(dataproducer, "Dataset Producer")
  System(productionhub, "Production systems", "Automated system for data production.")
  SystemDb(datastore, "Data storage", "File system for storage of timeseries.")

  System_Boundary(e-soh, "E-SOH node"){
    SystemDb(store24, "Data storage", "File system for storage of 24 hours of data.")
    SystemQueue(queue, "Event Queue (MQTT)", "WIS2 real-time data sharing by a publication/subscription (PubSub) mechanism based on the Message Queuing Protocol (MQP).")
    SystemDb(discovery24, "Catalog", "Discovery Metadata Catalog. Database that can serve APIs.")
    System(agent, "Metadata agent", "Subscriber agent that listens for new events from the queue.")
    System(edr, "OGC EDR", "The OGC EDR API searches for data according to user requests, lets the user define data collections (or new datasets), retrieves data, and packs the data in appropriate formats to be returned to the user.")
    System(search, "Data search API", "E.g, OGC Records or CSW.")
    System(access, "Data access API", "E.g., OPEnDAP.")
    System(bufr, "BUFR exporter", "Tool to create BUFR files that will be posted to GTS by WIS2.0 systems. We need to now what and when (or how often).")
  }
}

System_Ext(wis2, "WIS2.0", "WIS2.0 system(s).")

Rel_U(bufr, wis2, "posts to GTS via", "https")

Rel(productionhub, queue, "posts metadata in", "MQTT")
Rel_L(agent, queue, "listens for events from", "uri")
Rel_R(agent, discovery24, "posts metadata in", "https")
Rel(discovery24, store24, "references data in", "uri")
Rel(store24, datastore, "references data in", "uri")
Rel(store24, oscar, "references metadata in", "uri")
Rel(datastore, oscar, "references metadata in", "uri")
Rel(edr, search, "finds data in", "https")
Rel(edr, access, "accesses data in", "https")
Rel(access, store24, "streams data from", "https")
Rel(search, discovery24, "returns metadata from")

Rel(consumers, search, "finds data in", "https")
Rel(consumers, access, "accesses data in", "https")
Rel(consumers, edr, "gets datasets from", "https")

Rel(dataproducer, productionhub, "sets up data production in")

Rel(productionhub, datastore, "appends data to")
Rel(productionhub, store24, "stores data in")

SHOW_LEGEND()

@enduml
